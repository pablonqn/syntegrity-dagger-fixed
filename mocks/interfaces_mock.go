// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/interfaces/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=../internal/interfaces/interfaces.go -destination=interfaces_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dagger "dagger.io/dagger"
	interfaces "gitlab.com/syntegrity/syntegrity-infra/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockConfiguration is a mock of Configuration interface.
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
	isgomock struct{}
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration.
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance.
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockConfiguration) All() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockConfigurationMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockConfiguration)(nil).All))
}

// Environment mocks base method.
func (m *MockConfiguration) Environment() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

// Environment indicates an expected call of Environment.
func (mr *MockConfigurationMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockConfiguration)(nil).Environment))
}

// Get mocks base method.
func (m *MockConfiguration) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockConfigurationMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfiguration)(nil).Get), key)
}

// GetBool mocks base method.
func (m *MockConfiguration) GetBool(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockConfigurationMockRecorder) GetBool(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockConfiguration)(nil).GetBool), key)
}

// GetConfigSummary mocks base method.
func (m *MockConfiguration) GetConfigSummary() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigSummary")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigSummary indicates an expected call of GetConfigSummary.
func (mr *MockConfigurationMockRecorder) GetConfigSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigSummary", reflect.TypeOf((*MockConfiguration)(nil).GetConfigSummary))
}

// GetDuration mocks base method.
func (m *MockConfiguration) GetDuration(key string) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockConfigurationMockRecorder) GetDuration(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockConfiguration)(nil).GetDuration), key)
}

// GetFloat mocks base method.
func (m *MockConfiguration) GetFloat(key string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat", key)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat indicates an expected call of GetFloat.
func (mr *MockConfigurationMockRecorder) GetFloat(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat", reflect.TypeOf((*MockConfiguration)(nil).GetFloat), key)
}

// GetInt mocks base method.
func (m *MockConfiguration) GetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockConfigurationMockRecorder) GetInt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockConfiguration)(nil).GetInt), key)
}

// GetString mocks base method.
func (m *MockConfiguration) GetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockConfigurationMockRecorder) GetString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfiguration)(nil).GetString), key)
}

// Has mocks base method.
func (m *MockConfiguration) Has(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockConfigurationMockRecorder) Has(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockConfiguration)(nil).Has), key)
}

// Load mocks base method.
func (m *MockConfiguration) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockConfigurationMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfiguration)(nil).Load))
}

// LoadWithDefaults mocks base method.
func (m *MockConfiguration) LoadWithDefaults(defaults map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadWithDefaults", defaults)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadWithDefaults indicates an expected call of LoadWithDefaults.
func (mr *MockConfigurationMockRecorder) LoadWithDefaults(defaults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadWithDefaults", reflect.TypeOf((*MockConfiguration)(nil).LoadWithDefaults), defaults)
}

// Logging mocks base method.
func (m *MockConfiguration) Logging() interfaces.LoggingConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logging")
	ret0, _ := ret[0].(interfaces.LoggingConfig)
	return ret0
}

// Logging indicates an expected call of Logging.
func (mr *MockConfigurationMockRecorder) Logging() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logging", reflect.TypeOf((*MockConfiguration)(nil).Logging))
}

// Pipeline mocks base method.
func (m *MockConfiguration) Pipeline() interfaces.PipelineConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(interfaces.PipelineConfig)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockConfigurationMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockConfiguration)(nil).Pipeline))
}

// Registry mocks base method.
func (m *MockConfiguration) Registry() interfaces.RegistryConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(interfaces.RegistryConfig)
	return ret0
}

// Registry indicates an expected call of Registry.
func (mr *MockConfigurationMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockConfiguration)(nil).Registry))
}

// Security mocks base method.
func (m *MockConfiguration) Security() interfaces.SecurityConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Security")
	ret0, _ := ret[0].(interfaces.SecurityConfig)
	return ret0
}

// Security indicates an expected call of Security.
func (mr *MockConfigurationMockRecorder) Security() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Security", reflect.TypeOf((*MockConfiguration)(nil).Security))
}

// Set mocks base method.
func (m *MockConfiguration) Set(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockConfigurationMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfiguration)(nil).Set), key, value)
}

// Validate mocks base method.
func (m *MockConfiguration) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockConfigurationMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockConfiguration)(nil).Validate))
}

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
	isgomock struct{}
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContainer) Get(name string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContainerMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContainer)(nil).Get), name)
}

// GetDaggerClient mocks base method.
func (m *MockContainer) GetDaggerClient() (*dagger.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaggerClient")
	ret0, _ := ret[0].(*dagger.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaggerClient indicates an expected call of GetDaggerClient.
func (mr *MockContainerMockRecorder) GetDaggerClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaggerClient", reflect.TypeOf((*MockContainer)(nil).GetDaggerClient))
}

// GetLinter mocks base method.
func (m *MockContainer) GetLinter() (interfaces.Linter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinter")
	ret0, _ := ret[0].(interfaces.Linter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinter indicates an expected call of GetLinter.
func (mr *MockContainerMockRecorder) GetLinter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinter", reflect.TypeOf((*MockContainer)(nil).GetLinter))
}

// GetLogger mocks base method.
func (m *MockContainer) GetLogger() (interfaces.Logger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(interfaces.Logger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockContainerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockContainer)(nil).GetLogger))
}

// GetPipeline mocks base method.
func (m *MockContainer) GetPipeline(name string) (interfaces.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", name)
	ret0, _ := ret[0].(interfaces.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockContainerMockRecorder) GetPipeline(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockContainer)(nil).GetPipeline), name)
}

// GetPipelineRegistry mocks base method.
func (m *MockContainer) GetPipelineRegistry() (interfaces.PipelineRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRegistry")
	ret0, _ := ret[0].(interfaces.PipelineRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRegistry indicates an expected call of GetPipelineRegistry.
func (mr *MockContainerMockRecorder) GetPipelineRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRegistry", reflect.TypeOf((*MockContainer)(nil).GetPipelineRegistry))
}

// GetRegistryAuth mocks base method.
func (m *MockContainer) GetRegistryAuth() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryAuth")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegistryAuth indicates an expected call of GetRegistryAuth.
func (mr *MockContainerMockRecorder) GetRegistryAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryAuth", reflect.TypeOf((*MockContainer)(nil).GetRegistryAuth))
}

// GetRegistryConfig mocks base method.
func (m *MockContainer) GetRegistryConfig() (interfaces.RegistryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryConfig")
	ret0, _ := ret[0].(interfaces.RegistryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryConfig indicates an expected call of GetRegistryConfig.
func (mr *MockContainerMockRecorder) GetRegistryConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryConfig", reflect.TypeOf((*MockContainer)(nil).GetRegistryConfig))
}

// GetVulnChecker mocks base method.
func (m *MockContainer) GetVulnChecker() (interfaces.VulnChecker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnChecker")
	ret0, _ := ret[0].(interfaces.VulnChecker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnChecker indicates an expected call of GetVulnChecker.
func (mr *MockContainerMockRecorder) GetVulnChecker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnChecker", reflect.TypeOf((*MockContainer)(nil).GetVulnChecker))
}

// Register mocks base method.
func (m *MockContainer) Register(name string, factory func() (any, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", name, factory)
}

// Register indicates an expected call of Register.
func (mr *MockContainerMockRecorder) Register(name, factory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockContainer)(nil).Register), name, factory)
}

// Start mocks base method.
func (m *MockContainer) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockContainerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContainer)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockContainer) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockContainerMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContainer)(nil).Stop), ctx)
}

// Validate mocks base method.
func (m *MockContainer) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockContainerMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockContainer)(nil).Validate))
}

// MockPipelineProvider is a mock of PipelineProvider interface.
type MockPipelineProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineProviderMockRecorder
	isgomock struct{}
}

// MockPipelineProviderMockRecorder is the mock recorder for MockPipelineProvider.
type MockPipelineProviderMockRecorder struct {
	mock *MockPipelineProvider
}

// NewMockPipelineProvider creates a new mock instance.
func NewMockPipelineProvider(ctrl *gomock.Controller) *MockPipelineProvider {
	mock := &MockPipelineProvider{ctrl: ctrl}
	mock.recorder = &MockPipelineProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineProvider) EXPECT() *MockPipelineProviderMockRecorder {
	return m.recorder
}

// GetDaggerClient mocks base method.
func (m *MockPipelineProvider) GetDaggerClient() (*dagger.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaggerClient")
	ret0, _ := ret[0].(*dagger.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaggerClient indicates an expected call of GetDaggerClient.
func (mr *MockPipelineProviderMockRecorder) GetDaggerClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaggerClient", reflect.TypeOf((*MockPipelineProvider)(nil).GetDaggerClient))
}

// GetPipeline mocks base method.
func (m *MockPipelineProvider) GetPipeline(name string) (interfaces.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", name)
	ret0, _ := ret[0].(interfaces.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelineProviderMockRecorder) GetPipeline(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineProvider)(nil).GetPipeline), name)
}

// GetPipelineRegistry mocks base method.
func (m *MockPipelineProvider) GetPipelineRegistry() (interfaces.PipelineRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRegistry")
	ret0, _ := ret[0].(interfaces.PipelineRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineRegistry indicates an expected call of GetPipelineRegistry.
func (mr *MockPipelineProviderMockRecorder) GetPipelineRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRegistry", reflect.TypeOf((*MockPipelineProvider)(nil).GetPipelineRegistry))
}

// MockRegistryProvider is a mock of RegistryProvider interface.
type MockRegistryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryProviderMockRecorder
	isgomock struct{}
}

// MockRegistryProviderMockRecorder is the mock recorder for MockRegistryProvider.
type MockRegistryProviderMockRecorder struct {
	mock *MockRegistryProvider
}

// NewMockRegistryProvider creates a new mock instance.
func NewMockRegistryProvider(ctrl *gomock.Controller) *MockRegistryProvider {
	mock := &MockRegistryProvider{ctrl: ctrl}
	mock.recorder = &MockRegistryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryProvider) EXPECT() *MockRegistryProviderMockRecorder {
	return m.recorder
}

// GetRegistryAuth mocks base method.
func (m *MockRegistryProvider) GetRegistryAuth() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryAuth")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegistryAuth indicates an expected call of GetRegistryAuth.
func (mr *MockRegistryProviderMockRecorder) GetRegistryAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryAuth", reflect.TypeOf((*MockRegistryProvider)(nil).GetRegistryAuth))
}

// GetRegistryConfig mocks base method.
func (m *MockRegistryProvider) GetRegistryConfig() (interfaces.RegistryConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryConfig")
	ret0, _ := ret[0].(interfaces.RegistryConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryConfig indicates an expected call of GetRegistryConfig.
func (mr *MockRegistryProviderMockRecorder) GetRegistryConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryConfig", reflect.TypeOf((*MockRegistryProvider)(nil).GetRegistryConfig))
}

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// GetLinter mocks base method.
func (m *MockSecurityProvider) GetLinter() (interfaces.Linter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinter")
	ret0, _ := ret[0].(interfaces.Linter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinter indicates an expected call of GetLinter.
func (mr *MockSecurityProviderMockRecorder) GetLinter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinter", reflect.TypeOf((*MockSecurityProvider)(nil).GetLinter))
}

// GetVulnChecker mocks base method.
func (m *MockSecurityProvider) GetVulnChecker() (interfaces.VulnChecker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnChecker")
	ret0, _ := ret[0].(interfaces.VulnChecker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnChecker indicates an expected call of GetVulnChecker.
func (mr *MockSecurityProviderMockRecorder) GetVulnChecker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnChecker", reflect.TypeOf((*MockSecurityProvider)(nil).GetVulnChecker))
}

// MockLoggingProvider is a mock of LoggingProvider interface.
type MockLoggingProvider struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingProviderMockRecorder
	isgomock struct{}
}

// MockLoggingProviderMockRecorder is the mock recorder for MockLoggingProvider.
type MockLoggingProviderMockRecorder struct {
	mock *MockLoggingProvider
}

// NewMockLoggingProvider creates a new mock instance.
func NewMockLoggingProvider(ctrl *gomock.Controller) *MockLoggingProvider {
	mock := &MockLoggingProvider{ctrl: ctrl}
	mock.recorder = &MockLoggingProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingProvider) EXPECT() *MockLoggingProviderMockRecorder {
	return m.recorder
}

// GetLogger mocks base method.
func (m *MockLoggingProvider) GetLogger() (interfaces.Logger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(interfaces.Logger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockLoggingProviderMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockLoggingProvider)(nil).GetLogger))
}

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
	isgomock struct{}
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// AfterStep mocks base method.
func (m *MockPipeline) AfterStep(ctx context.Context, stepName string) interfaces.HookFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterStep", ctx, stepName)
	ret0, _ := ret[0].(interfaces.HookFunc)
	return ret0
}

// AfterStep indicates an expected call of AfterStep.
func (mr *MockPipelineMockRecorder) AfterStep(ctx, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStep", reflect.TypeOf((*MockPipeline)(nil).AfterStep), ctx, stepName)
}

// BeforeStep mocks base method.
func (m *MockPipeline) BeforeStep(ctx context.Context, stepName string) interfaces.HookFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeStep", ctx, stepName)
	ret0, _ := ret[0].(interfaces.HookFunc)
	return ret0
}

// BeforeStep indicates an expected call of BeforeStep.
func (mr *MockPipelineMockRecorder) BeforeStep(ctx, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStep", reflect.TypeOf((*MockPipeline)(nil).BeforeStep), ctx, stepName)
}

// ExecuteStep mocks base method.
func (m *MockPipeline) ExecuteStep(ctx context.Context, stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStep", ctx, stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteStep indicates an expected call of ExecuteStep.
func (mr *MockPipelineMockRecorder) ExecuteStep(ctx, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStep", reflect.TypeOf((*MockPipeline)(nil).ExecuteStep), ctx, stepName)
}

// GetAvailableSteps mocks base method.
func (m *MockPipeline) GetAvailableSteps() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSteps")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAvailableSteps indicates an expected call of GetAvailableSteps.
func (mr *MockPipelineMockRecorder) GetAvailableSteps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSteps", reflect.TypeOf((*MockPipeline)(nil).GetAvailableSteps))
}

// GetStepConfig mocks base method.
func (m *MockPipeline) GetStepConfig(stepName string) interfaces.StepConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepConfig", stepName)
	ret0, _ := ret[0].(interfaces.StepConfig)
	return ret0
}

// GetStepConfig indicates an expected call of GetStepConfig.
func (mr *MockPipelineMockRecorder) GetStepConfig(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepConfig", reflect.TypeOf((*MockPipeline)(nil).GetStepConfig), stepName)
}

// Name mocks base method.
func (m *MockPipeline) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPipelineMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPipeline)(nil).Name))
}

// ValidateStep mocks base method.
func (m *MockPipeline) ValidateStep(stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStep", stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStep indicates an expected call of ValidateStep.
func (mr *MockPipelineMockRecorder) ValidateStep(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStep", reflect.TypeOf((*MockPipeline)(nil).ValidateStep), stepName)
}

// MockStepExecutor is a mock of StepExecutor interface.
type MockStepExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockStepExecutorMockRecorder
	isgomock struct{}
}

// MockStepExecutorMockRecorder is the mock recorder for MockStepExecutor.
type MockStepExecutorMockRecorder struct {
	mock *MockStepExecutor
}

// NewMockStepExecutor creates a new mock instance.
func NewMockStepExecutor(ctrl *gomock.Controller) *MockStepExecutor {
	mock := &MockStepExecutor{ctrl: ctrl}
	mock.recorder = &MockStepExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepExecutor) EXPECT() *MockStepExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockStepExecutor) Execute(ctx context.Context, stepName string, config interfaces.StepConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, stepName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockStepExecutorMockRecorder) Execute(ctx, stepName, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStepExecutor)(nil).Execute), ctx, stepName, config)
}

// GetStepLogs mocks base method.
func (m *MockStepExecutor) GetStepLogs(stepName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepLogs", stepName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepLogs indicates an expected call of GetStepLogs.
func (mr *MockStepExecutorMockRecorder) GetStepLogs(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepLogs", reflect.TypeOf((*MockStepExecutor)(nil).GetStepLogs), stepName)
}

// GetStepResult mocks base method.
func (m *MockStepExecutor) GetStepResult(stepName string) (interfaces.StepResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepResult", stepName)
	ret0, _ := ret[0].(interfaces.StepResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepResult indicates an expected call of GetStepResult.
func (mr *MockStepExecutorMockRecorder) GetStepResult(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepResult", reflect.TypeOf((*MockStepExecutor)(nil).GetStepResult), stepName)
}

// MockPipelineRegistry is a mock of PipelineRegistry interface.
type MockPipelineRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRegistryMockRecorder
	isgomock struct{}
}

// MockPipelineRegistryMockRecorder is the mock recorder for MockPipelineRegistry.
type MockPipelineRegistryMockRecorder struct {
	mock *MockPipelineRegistry
}

// NewMockPipelineRegistry creates a new mock instance.
func NewMockPipelineRegistry(ctrl *gomock.Controller) *MockPipelineRegistry {
	mock := &MockPipelineRegistry{ctrl: ctrl}
	mock.recorder = &MockPipelineRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRegistry) EXPECT() *MockPipelineRegistryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPipelineRegistry) Get(name string, client *dagger.Client, cfg interfaces.Configuration) (interfaces.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, client, cfg)
	ret0, _ := ret[0].(interfaces.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPipelineRegistryMockRecorder) Get(name, client, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipelineRegistry)(nil).Get), name, client, cfg)
}

// List mocks base method.
func (m *MockPipelineRegistry) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPipelineRegistryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPipelineRegistry)(nil).List))
}

// Register mocks base method.
func (m *MockPipelineRegistry) Register(name string, factory func(*dagger.Client, interfaces.Configuration) interfaces.Pipeline) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", name, factory)
}

// Register indicates an expected call of Register.
func (mr *MockPipelineRegistryMockRecorder) Register(name, factory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPipelineRegistry)(nil).Register), name, factory)
}

// MockVulnChecker is a mock of VulnChecker interface.
type MockVulnChecker struct {
	ctrl     *gomock.Controller
	recorder *MockVulnCheckerMockRecorder
	isgomock struct{}
}

// MockVulnCheckerMockRecorder is the mock recorder for MockVulnChecker.
type MockVulnCheckerMockRecorder struct {
	mock *MockVulnChecker
}

// NewMockVulnChecker creates a new mock instance.
func NewMockVulnChecker(ctrl *gomock.Controller) *MockVulnChecker {
	mock := &MockVulnChecker{ctrl: ctrl}
	mock.recorder = &MockVulnCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnChecker) EXPECT() *MockVulnCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockVulnChecker) Check(ctx context.Context, src *dagger.Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockVulnCheckerMockRecorder) Check(ctx, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockVulnChecker)(nil).Check), ctx, src)
}

// GetReport mocks base method.
func (m *MockVulnChecker) GetReport(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockVulnCheckerMockRecorder) GetReport(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockVulnChecker)(nil).GetReport), ctx)
}

// MockLinter is a mock of Linter interface.
type MockLinter struct {
	ctrl     *gomock.Controller
	recorder *MockLinterMockRecorder
	isgomock struct{}
}

// MockLinterMockRecorder is the mock recorder for MockLinter.
type MockLinterMockRecorder struct {
	mock *MockLinter
}

// NewMockLinter creates a new mock instance.
func NewMockLinter(ctrl *gomock.Controller) *MockLinter {
	mock := &MockLinter{ctrl: ctrl}
	mock.recorder = &MockLinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinter) EXPECT() *MockLinterMockRecorder {
	return m.recorder
}

// GetReport mocks base method.
func (m *MockLinter) GetReport(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockLinterMockRecorder) GetReport(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockLinter)(nil).GetReport), ctx)
}

// Lint mocks base method.
func (m *MockLinter) Lint(ctx context.Context, src *dagger.Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lint", ctx, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lint indicates an expected call of Lint.
func (mr *MockLinterMockRecorder) Lint(ctx, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lint", reflect.TypeOf((*MockLinter)(nil).Lint), ctx, src)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, fields ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// WithField mocks base method.
func (m *MockLogger) WithField(key string, value any) interfaces.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MockLoggerMockRecorder) WithField(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogger)(nil).WithField), key, value)
}

// WithFields mocks base method.
func (m *MockLogger) WithFields(fields map[string]any) interfaces.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields.
func (mr *MockLoggerMockRecorder) WithFields(fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), fields)
}

// MockStepHandler is a mock of StepHandler interface.
type MockStepHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStepHandlerMockRecorder
	isgomock struct{}
}

// MockStepHandlerMockRecorder is the mock recorder for MockStepHandler.
type MockStepHandlerMockRecorder struct {
	mock *MockStepHandler
}

// NewMockStepHandler creates a new mock instance.
func NewMockStepHandler(ctrl *gomock.Controller) *MockStepHandler {
	mock := &MockStepHandler{ctrl: ctrl}
	mock.recorder = &MockStepHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepHandler) EXPECT() *MockStepHandlerMockRecorder {
	return m.recorder
}

// CanHandle mocks base method.
func (m *MockStepHandler) CanHandle(stepName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanHandle", stepName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanHandle indicates an expected call of CanHandle.
func (mr *MockStepHandlerMockRecorder) CanHandle(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanHandle", reflect.TypeOf((*MockStepHandler)(nil).CanHandle), stepName)
}

// Execute mocks base method.
func (m *MockStepHandler) Execute(ctx context.Context, stepName string, config interfaces.StepConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, stepName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockStepHandlerMockRecorder) Execute(ctx, stepName, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStepHandler)(nil).Execute), ctx, stepName, config)
}

// GetStepInfo mocks base method.
func (m *MockStepHandler) GetStepInfo(stepName string) interfaces.StepConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepInfo", stepName)
	ret0, _ := ret[0].(interfaces.StepConfig)
	return ret0
}

// GetStepInfo indicates an expected call of GetStepInfo.
func (mr *MockStepHandlerMockRecorder) GetStepInfo(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepInfo", reflect.TypeOf((*MockStepHandler)(nil).GetStepInfo), stepName)
}

// Validate mocks base method.
func (m *MockStepHandler) Validate(stepName string, config interfaces.StepConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", stepName, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockStepHandlerMockRecorder) Validate(stepName, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockStepHandler)(nil).Validate), stepName, config)
}

// MockHookManager is a mock of HookManager interface.
type MockHookManager struct {
	ctrl     *gomock.Controller
	recorder *MockHookManagerMockRecorder
	isgomock struct{}
}

// MockHookManagerMockRecorder is the mock recorder for MockHookManager.
type MockHookManagerMockRecorder struct {
	mock *MockHookManager
}

// NewMockHookManager creates a new mock instance.
func NewMockHookManager(ctrl *gomock.Controller) *MockHookManager {
	mock := &MockHookManager{ctrl: ctrl}
	mock.recorder = &MockHookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookManager) EXPECT() *MockHookManagerMockRecorder {
	return m.recorder
}

// ExecuteHooks mocks base method.
func (m *MockHookManager) ExecuteHooks(ctx context.Context, stepName string, hookType interfaces.HookType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteHooks", ctx, stepName, hookType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteHooks indicates an expected call of ExecuteHooks.
func (mr *MockHookManagerMockRecorder) ExecuteHooks(ctx, stepName, hookType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteHooks", reflect.TypeOf((*MockHookManager)(nil).ExecuteHooks), ctx, stepName, hookType)
}

// GetHooks mocks base method.
func (m *MockHookManager) GetHooks(stepName string, hookType interfaces.HookType) []interfaces.HookFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHooks", stepName, hookType)
	ret0, _ := ret[0].([]interfaces.HookFunc)
	return ret0
}

// GetHooks indicates an expected call of GetHooks.
func (mr *MockHookManagerMockRecorder) GetHooks(stepName, hookType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooks", reflect.TypeOf((*MockHookManager)(nil).GetHooks), stepName, hookType)
}

// RegisterHook mocks base method.
func (m *MockHookManager) RegisterHook(stepName string, hookType interfaces.HookType, hook interfaces.HookFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHook", stepName, hookType, hook)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockHookManagerMockRecorder) RegisterHook(stepName, hookType, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockHookManager)(nil).RegisterHook), stepName, hookType, hook)
}

// RemoveHook mocks base method.
func (m *MockHookManager) RemoveHook(stepName string, hookType interfaces.HookType, hook interfaces.HookFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHook", stepName, hookType, hook)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHook indicates an expected call of RemoveHook.
func (mr *MockHookManagerMockRecorder) RemoveHook(stepName, hookType, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHook", reflect.TypeOf((*MockHookManager)(nil).RemoveHook), stepName, hookType, hook)
}

// MockStepRegistry is a mock of StepRegistry interface.
type MockStepRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockStepRegistryMockRecorder
	isgomock struct{}
}

// MockStepRegistryMockRecorder is the mock recorder for MockStepRegistry.
type MockStepRegistryMockRecorder struct {
	mock *MockStepRegistry
}

// NewMockStepRegistry creates a new mock instance.
func NewMockStepRegistry(ctrl *gomock.Controller) *MockStepRegistry {
	mock := &MockStepRegistry{ctrl: ctrl}
	mock.recorder = &MockStepRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepRegistry) EXPECT() *MockStepRegistryMockRecorder {
	return m.recorder
}

// ExecuteStep mocks base method.
func (m *MockStepRegistry) ExecuteStep(ctx context.Context, stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStep", ctx, stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteStep indicates an expected call of ExecuteStep.
func (mr *MockStepRegistryMockRecorder) ExecuteStep(ctx, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStep", reflect.TypeOf((*MockStepRegistry)(nil).ExecuteStep), ctx, stepName)
}

// GetExecutionOrder mocks base method.
func (m *MockStepRegistry) GetExecutionOrder() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionOrder")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionOrder indicates an expected call of GetExecutionOrder.
func (mr *MockStepRegistryMockRecorder) GetExecutionOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionOrder", reflect.TypeOf((*MockStepRegistry)(nil).GetExecutionOrder))
}

// GetStepConfig mocks base method.
func (m *MockStepRegistry) GetStepConfig(stepName string) (interfaces.StepConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepConfig", stepName)
	ret0, _ := ret[0].(interfaces.StepConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepConfig indicates an expected call of GetStepConfig.
func (mr *MockStepRegistryMockRecorder) GetStepConfig(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepConfig", reflect.TypeOf((*MockStepRegistry)(nil).GetStepConfig), stepName)
}

// GetStepHandler mocks base method.
func (m *MockStepRegistry) GetStepHandler(stepName string) (interfaces.StepHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepHandler", stepName)
	ret0, _ := ret[0].(interfaces.StepHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepHandler indicates an expected call of GetStepHandler.
func (mr *MockStepRegistryMockRecorder) GetStepHandler(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepHandler", reflect.TypeOf((*MockStepRegistry)(nil).GetStepHandler), stepName)
}

// ListSteps mocks base method.
func (m *MockStepRegistry) ListSteps() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSteps")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListSteps indicates an expected call of ListSteps.
func (mr *MockStepRegistryMockRecorder) ListSteps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSteps", reflect.TypeOf((*MockStepRegistry)(nil).ListSteps))
}

// RegisterStep mocks base method.
func (m *MockStepRegistry) RegisterStep(stepName string, handler interfaces.StepHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStep", stepName, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStep indicates an expected call of RegisterStep.
func (mr *MockStepRegistryMockRecorder) RegisterStep(stepName, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStep", reflect.TypeOf((*MockStepRegistry)(nil).RegisterStep), stepName, handler)
}

// ValidateStep mocks base method.
func (m *MockStepRegistry) ValidateStep(stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStep", stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStep indicates an expected call of ValidateStep.
func (mr *MockStepRegistryMockRecorder) ValidateStep(stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStep", reflect.TypeOf((*MockStepRegistry)(nil).ValidateStep), stepName)
}

// MockPipelineExecutor is a mock of PipelineExecutor interface.
type MockPipelineExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineExecutorMockRecorder
	isgomock struct{}
}

// MockPipelineExecutorMockRecorder is the mock recorder for MockPipelineExecutor.
type MockPipelineExecutorMockRecorder struct {
	mock *MockPipelineExecutor
}

// NewMockPipelineExecutor creates a new mock instance.
func NewMockPipelineExecutor(ctrl *gomock.Controller) *MockPipelineExecutor {
	mock := &MockPipelineExecutor{ctrl: ctrl}
	mock.recorder = &MockPipelineExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineExecutor) EXPECT() *MockPipelineExecutorMockRecorder {
	return m.recorder
}

// CancelPipeline mocks base method.
func (m *MockPipelineExecutor) CancelPipeline(pipelineName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPipeline", pipelineName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPipeline indicates an expected call of CancelPipeline.
func (mr *MockPipelineExecutorMockRecorder) CancelPipeline(pipelineName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipeline", reflect.TypeOf((*MockPipelineExecutor)(nil).CancelPipeline), pipelineName)
}

// ExecutePipeline mocks base method.
func (m *MockPipelineExecutor) ExecutePipeline(ctx context.Context, pipelineName string, steps []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePipeline", ctx, pipelineName, steps)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecutePipeline indicates an expected call of ExecutePipeline.
func (mr *MockPipelineExecutorMockRecorder) ExecutePipeline(ctx, pipelineName, steps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePipeline", reflect.TypeOf((*MockPipelineExecutor)(nil).ExecutePipeline), ctx, pipelineName, steps)
}

// ExecuteStep mocks base method.
func (m *MockPipelineExecutor) ExecuteStep(ctx context.Context, pipelineName, stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStep", ctx, pipelineName, stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteStep indicates an expected call of ExecuteStep.
func (mr *MockPipelineExecutorMockRecorder) ExecuteStep(ctx, pipelineName, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStep", reflect.TypeOf((*MockPipelineExecutor)(nil).ExecuteStep), ctx, pipelineName, stepName)
}

// GetPipelineLogs mocks base method.
func (m *MockPipelineExecutor) GetPipelineLogs(pipelineName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineLogs", pipelineName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineLogs indicates an expected call of GetPipelineLogs.
func (mr *MockPipelineExecutorMockRecorder) GetPipelineLogs(pipelineName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineLogs", reflect.TypeOf((*MockPipelineExecutor)(nil).GetPipelineLogs), pipelineName)
}

// GetPipelineStatus mocks base method.
func (m *MockPipelineExecutor) GetPipelineStatus(pipelineName string) (interfaces.PipelineStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineStatus", pipelineName)
	ret0, _ := ret[0].(interfaces.PipelineStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineStatus indicates an expected call of GetPipelineStatus.
func (mr *MockPipelineExecutorMockRecorder) GetPipelineStatus(pipelineName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineStatus", reflect.TypeOf((*MockPipelineExecutor)(nil).GetPipelineStatus), pipelineName)
}

// GetStepStatus mocks base method.
func (m *MockPipelineExecutor) GetStepStatus(pipelineName, stepName string) (interfaces.StepResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStepStatus", pipelineName, stepName)
	ret0, _ := ret[0].(interfaces.StepResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStepStatus indicates an expected call of GetStepStatus.
func (mr *MockPipelineExecutorMockRecorder) GetStepStatus(pipelineName, stepName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStepStatus", reflect.TypeOf((*MockPipelineExecutor)(nil).GetStepStatus), pipelineName, stepName)
}
