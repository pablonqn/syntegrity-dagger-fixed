// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/pipelines/test/test.go
//
// Generated by this command:
//
//	mockgen -source=../internal/pipelines/test/test.go -destination=test_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestable is a mock of Testable interface.
type MockTestable struct {
	ctrl     *gomock.Controller
	recorder *MockTestableMockRecorder
	isgomock struct{}
}

// MockTestableMockRecorder is the mock recorder for MockTestable.
type MockTestableMockRecorder struct {
	mock *MockTestable
}

// NewMockTestable creates a new mock instance.
func NewMockTestable(ctrl *gomock.Controller) *MockTestable {
	mock := &MockTestable{ctrl: ctrl}
	mock.recorder = &MockTestableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestable) EXPECT() *MockTestableMockRecorder {
	return m.recorder
}

// RunTests mocks base method.
func (m *MockTestable) RunTests(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTests", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTests indicates an expected call of RunTests.
func (mr *MockTestableMockRecorder) RunTests(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTests", reflect.TypeOf((*MockTestable)(nil).RunTests), ctx)
}
