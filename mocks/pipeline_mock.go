// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pipelines/pipeline.go
//
// Generated by this command:
//
//	mockgen -source=internal/pipelines/pipeline.go -destination=mocks/pipeline_mock.go -package=mocks -mock_names=Pipeline=PipelinesMockPipeline
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pipelines "github.com/getsyntegrity/syntegrity-dagger/internal/pipelines"
	gomock "go.uber.org/mock/gomock"
)

// PipelinesMockPipeline is a mock of Pipeline interface.
type PipelinesMockPipeline struct {
	ctrl     *gomock.Controller
	recorder *PipelinesMockPipelineMockRecorder
	isgomock struct{}
}

// PipelinesMockPipelineMockRecorder is the mock recorder for PipelinesMockPipeline.
type PipelinesMockPipelineMockRecorder struct {
	mock *PipelinesMockPipeline
}

// NewPipelinesMockPipeline creates a new mock instance.
func NewPipelinesMockPipeline(ctrl *gomock.Controller) *PipelinesMockPipeline {
	mock := &PipelinesMockPipeline{ctrl: ctrl}
	mock.recorder = &PipelinesMockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelinesMockPipeline) EXPECT() *PipelinesMockPipelineMockRecorder {
	return m.recorder
}

// AfterStep mocks base method.
func (m *PipelinesMockPipeline) AfterStep(ctx context.Context, step string) pipelines.HookFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterStep", ctx, step)
	ret0, _ := ret[0].(pipelines.HookFunc)
	return ret0
}

// AfterStep indicates an expected call of AfterStep.
func (mr *PipelinesMockPipelineMockRecorder) AfterStep(ctx, step any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterStep", reflect.TypeOf((*PipelinesMockPipeline)(nil).AfterStep), ctx, step)
}

// BeforeStep mocks base method.
func (m *PipelinesMockPipeline) BeforeStep(ctx context.Context, step string) pipelines.HookFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeStep", ctx, step)
	ret0, _ := ret[0].(pipelines.HookFunc)
	return ret0
}

// BeforeStep indicates an expected call of BeforeStep.
func (mr *PipelinesMockPipelineMockRecorder) BeforeStep(ctx, step any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeStep", reflect.TypeOf((*PipelinesMockPipeline)(nil).BeforeStep), ctx, step)
}

// Build mocks base method.
func (m *PipelinesMockPipeline) Build(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *PipelinesMockPipelineMockRecorder) Build(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*PipelinesMockPipeline)(nil).Build), ctx)
}

// Name mocks base method.
func (m *PipelinesMockPipeline) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *PipelinesMockPipelineMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*PipelinesMockPipeline)(nil).Name))
}

// Package mocks base method.
func (m *PipelinesMockPipeline) Package(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Package indicates an expected call of Package.
func (mr *PipelinesMockPipelineMockRecorder) Package(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*PipelinesMockPipeline)(nil).Package), ctx)
}

// Push mocks base method.
func (m *PipelinesMockPipeline) Push(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *PipelinesMockPipelineMockRecorder) Push(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*PipelinesMockPipeline)(nil).Push), ctx)
}

// Setup mocks base method.
func (m *PipelinesMockPipeline) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *PipelinesMockPipelineMockRecorder) Setup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*PipelinesMockPipeline)(nil).Setup), ctx)
}

// Tag mocks base method.
func (m *PipelinesMockPipeline) Tag(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *PipelinesMockPipelineMockRecorder) Tag(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*PipelinesMockPipeline)(nil).Tag), ctx)
}

// Test mocks base method.
func (m *PipelinesMockPipeline) Test(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *PipelinesMockPipelineMockRecorder) Test(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*PipelinesMockPipeline)(nil).Test), ctx)
}

// MockSetupper is a mock of Setupper interface.
type MockSetupper struct {
	ctrl     *gomock.Controller
	recorder *MockSetupperMockRecorder
	isgomock struct{}
}

// MockSetupperMockRecorder is the mock recorder for MockSetupper.
type MockSetupperMockRecorder struct {
	mock *MockSetupper
}

// NewMockSetupper creates a new mock instance.
func NewMockSetupper(ctrl *gomock.Controller) *MockSetupper {
	mock := &MockSetupper{ctrl: ctrl}
	mock.recorder = &MockSetupperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetupper) EXPECT() *MockSetupperMockRecorder {
	return m.recorder
}

// Setup mocks base method.
func (m *MockSetupper) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockSetupperMockRecorder) Setup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockSetupper)(nil).Setup), ctx)
}

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBuilder) Build(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockBuilderMockRecorder) Build(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build), ctx)
}

// MockTester is a mock of Tester interface.
type MockTester struct {
	ctrl     *gomock.Controller
	recorder *MockTesterMockRecorder
	isgomock struct{}
}

// MockTesterMockRecorder is the mock recorder for MockTester.
type MockTesterMockRecorder struct {
	mock *MockTester
}

// NewMockTester creates a new mock instance.
func NewMockTester(ctrl *gomock.Controller) *MockTester {
	mock := &MockTester{ctrl: ctrl}
	mock.recorder = &MockTesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTester) EXPECT() *MockTesterMockRecorder {
	return m.recorder
}

// Test mocks base method.
func (m *MockTester) Test(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockTesterMockRecorder) Test(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockTester)(nil).Test), ctx)
}

// MockTagger is a mock of Tagger interface.
type MockTagger struct {
	ctrl     *gomock.Controller
	recorder *MockTaggerMockRecorder
	isgomock struct{}
}

// MockTaggerMockRecorder is the mock recorder for MockTagger.
type MockTaggerMockRecorder struct {
	mock *MockTagger
}

// NewMockTagger creates a new mock instance.
func NewMockTagger(ctrl *gomock.Controller) *MockTagger {
	mock := &MockTagger{ctrl: ctrl}
	mock.recorder = &MockTaggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagger) EXPECT() *MockTaggerMockRecorder {
	return m.recorder
}

// Tag mocks base method.
func (m *MockTagger) Tag(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockTaggerMockRecorder) Tag(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockTagger)(nil).Tag), ctx)
}

// MockPackager is a mock of Packager interface.
type MockPackager struct {
	ctrl     *gomock.Controller
	recorder *MockPackagerMockRecorder
	isgomock struct{}
}

// MockPackagerMockRecorder is the mock recorder for MockPackager.
type MockPackagerMockRecorder struct {
	mock *MockPackager
}

// NewMockPackager creates a new mock instance.
func NewMockPackager(ctrl *gomock.Controller) *MockPackager {
	mock := &MockPackager{ctrl: ctrl}
	mock.recorder = &MockPackagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackager) EXPECT() *MockPackagerMockRecorder {
	return m.recorder
}

// Package mocks base method.
func (m *MockPackager) Package(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Package indicates an expected call of Package.
func (mr *MockPackagerMockRecorder) Package(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*MockPackager)(nil).Package), ctx)
}

// MockPusher is a mock of Pusher interface.
type MockPusher struct {
	ctrl     *gomock.Controller
	recorder *MockPusherMockRecorder
	isgomock struct{}
}

// MockPusherMockRecorder is the mock recorder for MockPusher.
type MockPusherMockRecorder struct {
	mock *MockPusher
}

// NewMockPusher creates a new mock instance.
func NewMockPusher(ctrl *gomock.Controller) *MockPusher {
	mock := &MockPusher{ctrl: ctrl}
	mock.recorder = &MockPusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPusher) EXPECT() *MockPusherMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockPusher) Push(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockPusherMockRecorder) Push(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPusher)(nil).Push), ctx)
}
