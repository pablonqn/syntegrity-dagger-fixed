name: PR Quality Checks

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.25.1'
  COVERAGE_THRESHOLD: 25  # Minimum coverage percentage (temporarily lowered for development)

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Generate cache key
      id: cache-key
      run: echo "key=pr-checks-${{ hashFiles('go.sum') }}-${{ github.sha }}" >> $GITHUB_OUTPUT
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          pr-checks-${{ hashFiles('go.sum') }}-
          pr-checks-
          
    - name: Download dependencies
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify

  # Stage 2: Linting
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          pr-checks-${{ hashFiles('go.sum') }}-
          pr-checks-
          
    - name: Install linting tools
      run: |
        # Download golangci-lint binary using curl
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
        # Install goimports using go install (still needed for goimports)
        go install golang.org/x/tools/cmd/goimports@latest
        
    - name: Run goimports
      run: |
        # Check if goimports would make changes
        if ! goimports -l . | grep -q .; then
          echo "✅ goimports: No formatting issues found"
        else
          echo "❌ goimports: Formatting issues found:"
          goimports -l .
          exit 1
        fi
        
    - name: Run golangci-lint
      run: |
        golangci-lint run --timeout=5m --verbose
        
    - name: Run make lint (if Makefile exists)
      run: |
        if [ -f "Makefile" ] && grep -q "lint:" Makefile; then
          echo "Running make lint..."
          make lint
        else
          echo "No make lint target found, skipping..."
        fi

  # Stage 3: Tests with Coverage
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          pr-checks-${{ hashFiles('go.sum') }}-
          pr-checks-
          
    - name: Run tests with coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic \
          ./pkg/...
        
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        echo "Required threshold: ${COVERAGE_THRESHOLD}%"
        
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('coverage.out', 'utf8');
          const lines = coverage.split('\n');
          const totalLine = lines.find(line => line.includes('total:'));
          const coveragePercent = totalLine ? totalLine.split('\t')[2].replace('%', '') : '0';
          
          const comment = `## 📊 Test Coverage Report
          
          **Coverage: ${coveragePercent}%**
          **Threshold: ${process.env.COVERAGE_THRESHOLD}%**
          
          ${parseFloat(coveragePercent) >= parseFloat(process.env.COVERAGE_THRESHOLD) ? '✅' : '❌'} ${parseFloat(coveragePercent) >= parseFloat(process.env.COVERAGE_THRESHOLD) ? 'Coverage meets requirements' : 'Coverage below threshold'}
          
          <details>
          <summary>View detailed coverage report</summary>
          
          \`\`\`
          ${totalLine || 'No coverage data available'}
          \`\`\`
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Stage 4: Security Check
  security:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          pr-checks-${{ hashFiles('go.sum') }}-
          pr-checks-
          
    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... | tee vuln_report.txt
        if grep -q "Vulnerabilities found" vuln_report.txt; then
          echo "❌ Security vulnerabilities detected! Please update dependencies."
          cat vuln_report.txt
          exit 1
        else
          echo "✅ No security vulnerabilities found."
        fi

  # Stage 5: Build Check
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ needs.setup.outputs.cache-key }}
        restore-keys: |
          pr-checks-${{ hashFiles('go.sum') }}-
          pr-checks-
          
    - name: Build
      run: go build ./...
      
    - name: Run make build (if Makefile exists)
      run: |
        if [ -f "Makefile" ] && grep -q "build:" Makefile; then
          echo "Running make build..."
          make build
        else
          echo "No make build target found, skipping..."
        fi
