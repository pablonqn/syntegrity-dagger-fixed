name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.0'
  CACHE_VERSION: v1

jobs:
  # Stage 1: Determine pipeline type and configuration
  determine-pipeline:
    runs-on: ubuntu-latest
    outputs:
      pipeline-type: ${{ steps.determine.outputs.type }}
      run-security: ${{ steps.determine.outputs.security }}
      run-coverage: ${{ steps.determine.outputs.coverage }}
      is-release: ${{ steps.determine.outputs.release }}
    steps:
    - name: Determine pipeline type
      id: determine
      run: |
        echo "🔍 Analyzing pipeline context..."
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        
        # Determine pipeline type based on context
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "type=pr" >> $GITHUB_OUTPUT
          echo "security=true" >> $GITHUB_OUTPUT
          echo "coverage=true" >> $GITHUB_OUTPUT
          echo "release=false" >> $GITHUB_OUTPUT
          echo "📋 Pipeline: Pull Request (full pipeline)"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "type=main" >> $GITHUB_OUTPUT
          echo "security=true" >> $GITHUB_OUTPUT
          echo "coverage=true" >> $GITHUB_OUTPUT
          echo "release=false" >> $GITHUB_OUTPUT
          echo "📋 Pipeline: Main branch (full pipeline)"
        else
          echo "type=feature" >> $GITHUB_OUTPUT
          echo "security=false" >> $GITHUB_OUTPUT
          echo "coverage=false" >> $GITHUB_OUTPUT
          echo "release=false" >> $GITHUB_OUTPUT
          echo "📋 Pipeline: Feature branch (lightweight pipeline)"
        fi

  # Stage 2: Setup and Dependencies (always runs)
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # Disable default cache to use our custom one
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Clean Go module cache
      run: |
        echo "🧹 Cleaning Go module cache..."
        # Clean any existing module cache to avoid conflicts
        sudo rm -rf ~/go/pkg/mod 2>/dev/null || true
        sudo rm -rf ~/.cache/go-build 2>/dev/null || true
        mkdir -p ~/go/pkg/mod
        mkdir -p ~/.cache/go-build
        echo "✅ Go module cache cleaned"
        
    - name: Cache Go modules                                                      
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
        restore-keys: |
          go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-
          go-mod-${{ hashFiles('go.sum') }}-
          go-mod-
        fail-on-cache-miss: false
          
    - name: Download dependencies
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        echo "📦 Downloading Go dependencies..."
        go mod download
        echo "✅ Dependencies downloaded"
      
    - name: Verify dependencies
      run: |
        echo "🔍 Verifying dependencies..."
        go mod verify
        echo "✅ Dependencies verified"

  # Stage 3: Build (runs in parallel with tests and lint)
  build:
    runs-on: ubuntu-latest
    needs: [determine-pipeline, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # Disable default cache to use our custom one
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Clean Go module cache
      run: |
        echo "🧹 Cleaning Go module cache..."
        sudo rm -rf ~/go/pkg/mod 2>/dev/null || true
        sudo rm -rf ~/.cache/go-build 2>/dev/null || true
        mkdir -p ~/go/pkg/mod
        mkdir -p ~/.cache/go-build
        echo "✅ Go module cache cleaned"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
        restore-keys: |
          go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-
          go-mod-${{ hashFiles('go.sum') }}-
          go-mod-
        fail-on-cache-miss: false
          
    - name: Build
      run: |
        echo "🔨 Building application..."
        go build ./...

  # Stage 4: Tests (runs in parallel with build)
  test:
    runs-on: ubuntu-latest
    needs: [determine-pipeline, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # Disable default cache to use our custom one
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Clean Go module cache
      run: |
        echo "🧹 Cleaning Go module cache..."
        sudo rm -rf ~/go/pkg/mod 2>/dev/null || true
        sudo rm -rf ~/.cache/go-build 2>/dev/null || true
        mkdir -p ~/go/pkg/mod
        mkdir -p ~/.cache/go-build
        echo "✅ Go module cache cleaned"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
        restore-keys: |
          go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-
          go-mod-${{ hashFiles('go.sum') }}-
          go-mod-
        fail-on-cache-miss: false
          
    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        if [[ "${{ needs.determine-pipeline.outputs.pipeline-type }}" == "feature" ]]; then
          echo "📋 Feature branch: Running basic tests"
          go test -race ./...
        else
          echo "📋 Main/PR: Running full test suite with coverage"
          go test -race -coverprofile=coverage.out ./...
        fi
      
    - name: Upload coverage
      if: needs.determine-pipeline.outputs.run-coverage == 'true'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        fail_ci_if_error: false

  # Stage 5: Linting (runs in parallel with build and test)
  lint:
    runs-on: ubuntu-latest
    needs: [determine-pipeline, setup]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # Disable default cache to use our custom one
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Clean Go module cache
      run: |
        echo "🧹 Cleaning Go module cache..."
        sudo rm -rf ~/go/pkg/mod 2>/dev/null || true
        sudo rm -rf ~/.cache/go-build 2>/dev/null || true
        mkdir -p ~/go/pkg/mod
        mkdir -p ~/.cache/go-build
        echo "✅ Go module cache cleaned"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
        restore-keys: |
          go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-
          go-mod-${{ hashFiles('go.sum') }}-
          go-mod-
        fail-on-cache-miss: false
          
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: |
          --timeout=${{ needs.determine-pipeline.outputs.pipeline-type == 'feature' && '3m' || '5m' }}

  # Stage 6: Security (only for main/develop/PRs)
  security:
    runs-on: ubuntu-latest
    needs: [determine-pipeline, build, test, lint]
    if: needs.determine-pipeline.outputs.run-security == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false  # Disable default cache to use our custom one
        
    - name: Configure Git and Go for private repos
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        # Configure Go to treat getsyntegrity repos as private
        go env -w GOPRIVATE=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOPROXY=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        go env -w GONOSUMDB=github.com/getsyntegrity/*,gitlab.com/syntegrity/*
        # Create .netrc file for authentication
        echo "machine github.com" > ~/.netrc
        echo "login x-access-token" >> ~/.netrc
        echo "password ${{ secrets.ORG_CHECKOUT_TOKEN }}" >> ~/.netrc
        chmod 600 ~/.netrc
        # Configure Git authentication
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        git config --global url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "git@github.com:"
        
    - name: Clean Go module cache
      run: |
        echo "🧹 Cleaning Go module cache..."
        sudo rm -rf ~/go/pkg/mod 2>/dev/null || true
        sudo rm -rf ~/.cache/go-build 2>/dev/null || true
        mkdir -p ~/go/pkg/mod
        mkdir -p ~/.cache/go-build
        echo "✅ Go module cache cleaned"
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-${{ runner.os }}
        restore-keys: |
          go-mod-${{ hashFiles('go.sum') }}-${{ env.CACHE_VERSION }}-
          go-mod-${{ hashFiles('go.sum') }}-
          go-mod-
        fail-on-cache-miss: false
          
    - name: Check for vulnerabilities
      run: |
        echo "🔒 Running security scan..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... | tee vuln_report.txt
        if grep -q "Vulnerabilities found" vuln_report.txt; then
          echo "❌ Security vulnerabilities detected! Please update dependencies."
          cat vuln_report.txt
          exit 1
        else
          echo "✅ No security vulnerabilities found."
        fi