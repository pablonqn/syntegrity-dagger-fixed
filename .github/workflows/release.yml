name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  GO_VERSION: '1.25.1'

jobs:
  # Check if this is a release-worthy commit
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Check if should release
      id: check
      run: |
        # Check if this is a manual dispatch
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "release-type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if this is a push to main
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Check if commit message contains release keywords
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if echo "$COMMIT_MSG" | grep -qiE "(feat|feature|minor)"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qiE "(fix|hotfix|patch|bug)"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=patch" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MSG" | grep -qiE "(breaking|major)"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=major" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "release-type=none" >> $GITHUB_OUTPUT
          fi
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "release-type=none" >> $GITHUB_OUTPUT
        fi

  # Create release
  create-release:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should-release == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_CHECKOUT_TOKEN }}
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Configure Git
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        # Configure Git to use token for authentication
        git config --local url."https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"
        
    - name: Get current version
      id: current-version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "current-version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Current version: $LATEST_TAG"
        
    - name: Calculate next version
      id: next-version
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        RELEASE_TYPE="${{ needs.check-release.outputs.release-type }}"
        
        # Remove 'v' prefix and split version
        VERSION=${CURRENT_VERSION#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Calculate next version based on release type
        case $RELEASE_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        NEXT_VERSION="${{ steps.next-version.outputs.next-version }}"
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        
        # Generate changelog from commits
        echo "## Changes in $NEXT_VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        if [ "$CURRENT_VERSION" = "v0.0.0" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log $CURRENT_VERSION..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" >> CHANGELOG.md
        else
          echo "- No changes detected" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$CURRENT_VERSION...$NEXT_VERSION" >> CHANGELOG.md
        
        # Output changelog for release notes
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create and push tag
      env:
        ORG_CHECKOUT_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      run: |
        NEXT_VERSION="${{ steps.next-version.outputs.next-version }}"
        
        # Verify token permissions
        echo "Testing token permissions..."
        git ls-remote --heads origin main || echo "Warning: Could not access main branch"
        
        # Create tag
        git tag -a "$NEXT_VERSION" -m "Release $NEXT_VERSION"
        
        # Push tag with explicit authentication
        git push https://x-access-token:${{ secrets.ORG_CHECKOUT_TOKEN }}@github.com/${{ github.repository }}.git "$NEXT_VERSION"
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
      with:
        tag_name: ${{ steps.next-version.outputs.next-version }}
        release_name: Release ${{ steps.next-version.outputs.next-version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
    - name: Build and upload release assets
      run: |
        NEXT_VERSION="${{ steps.next-version.outputs.next-version }}"
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o go-kit-linux-amd64 ./...
        GOOS=darwin GOARCH=amd64 go build -o go-kit-darwin-amd64 ./...
        GOOS=windows GOARCH=amd64 go build -o go-kit-windows-amd64.exe ./...
        
        # Upload assets to release
        gh release upload "$NEXT_VERSION" go-kit-linux-amd64
        gh release upload "$NEXT_VERSION" go-kit-darwin-amd64  
        gh release upload "$NEXT_VERSION" go-kit-windows-amd64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}
