name: Release Pipeline

# GitHub Actions workflow for automated releases
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.0.1'
permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.25.1'
  BINARY_NAME: 'syntegrity-dagger'
  RELEASE_DIR: 'release'
jobs:
  # Job 1: Determine version and create tag
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Auto-increment version based on previous tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION_NUM=$(echo $LATEST_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
          MINOR=$(echo $VERSION_NUM | cut -d. -f2)
          PATCH=$(echo $VERSION_NUM | cut -d. -f3)
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "🎯 Determined version: $VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Create changelog file
        cat > CHANGELOG.md << EOF
        # Changelog - ${{ steps.version.outputs.version }}
        
        ## Changes in this release:
        $CHANGELOG
        
        ## Full Changelog
        https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.tag }}
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "📝 Generated changelog"
        
    - name: Create and push tag
      run: |
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push origin "${{ steps.version.outputs.tag }}"
        echo "🏷️ Created and pushed tag: ${{ steps.version.outputs.tag }}"

  # Job 2: Build binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            ext: ""
          - os: linux
            arch: arm64
            ext: ""
          - os: darwin
            arch: amd64
            ext: ""
          - os: darwin
            arch: arm64
            ext: ""
          - os: windows
            arch: amd64
            ext: ".exe"
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Configure Git and Go for private repos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "${{ steps.version.outputs.tag }}"
        echo "🏷️ Created and pushed tag: ${{ steps.version.outputs.tag }}"

  # Job 3: Create GitHub Release
  release:
    runs-on: ubuntu-latest
    needs: [version, build-binaries]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release directory
      run: |
        mkdir -p ${{ env.RELEASE_DIR }}
        # Move all binaries to release directory
        find . -name "${{ env.BINARY_NAME }}-*" -exec mv {} ${{ env.RELEASE_DIR }}/ \;
        
    - name: Generate checksums
      run: |
        cd ${{ env.RELEASE_DIR }}
        sha256sum * > checksums.txt
        echo "Generated checksums:"
        cat checksums.txt
        
    - name: Create release notes
      run: |
        cat > release-notes.md << EOF
        # Release ${{ needs.version.outputs.version }}
        
        ## 📦 Binaries
        This release includes pre-compiled binaries for multiple platforms:
        
        - **Linux AMD64**: \`${{ env.BINARY_NAME }}-linux-amd64\`
        - **Linux ARM64**: \`${{ env.BINARY_NAME }}-linux-arm64\`
        - **macOS AMD64**: \`${{ env.BINARY_NAME }}-darwin-amd64\`
        - **macOS ARM64**: \`${{ env.BINARY_NAME }}-darwin-arm64\`
        - **Windows AMD64**: \`${{ env.BINARY_NAME }}-windows-amd64.exe\`
        
        ## 🔧 Installation
        \`\`\`bash
        # Download the appropriate binary for your platform
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/${{ env.BINARY_NAME }}-linux-amd64 -o ${{ env.BINARY_NAME }}
        chmod +x ${{ env.BINARY_NAME }}
        \`\`\`
        
        ## 📋 Changelog
        ${{ needs.version.outputs.changelog }}
        
        ## 🔗 Shared Library Usage
        Other services can use this release as a shared library:
        \`\`\`bash
        # Download and use in CI/CD pipelines
        curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/${{ env.BINARY_NAME }}-linux-amd64 -o ${{ env.BINARY_NAME }}
        chmod +x ${{ env.BINARY_NAME }}
        ./${{ env.BINARY_NAME }} --help
        \`\`\`
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: Release ${{ needs.version.outputs.tag }}
        body_path: release-notes.md
        files: |
          ${{ env.RELEASE_DIR }}/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update latest symlink
      run: |
        # Create a 'latest' release for easy access
        echo "🔗 Release created: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }}"
        echo "📥 Direct download: https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/${{ env.BINARY_NAME }}-linux-amd64"
