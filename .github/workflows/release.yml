name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.25.1'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_CHECKOUT_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy
      env:
        GOPRIVATE: gitlab.com/syntegrity/*
        GONOPROXY: gitlab.com/syntegrity/*
        GONOSUMDB: gitlab.com/syntegrity/*

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        version: latest
        install-only: true

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.ORG_CHECKOUT_TOKEN }}

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_CHECKOUT_TOKEN }}

    - name: Create and push tag
      run: |
        TAG="${{ github.event.inputs.tag }}"
        if [ -z "$TAG" ]; then
          echo "Error: Tag is required"
          exit 1
        fi
        
        # Validate tag format (should start with 'v' followed by semantic version)
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-]+)?(\+[a-zA-Z0-9\-]+)?$ ]]; then
          echo "Error: Tag must follow semantic versioning format (e.g., v1.0.0, v1.0.0-alpha, v1.0.0+build)"
          exit 1
        fi
        
        # Check if tag already exists
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Error: Tag $TAG already exists"
          exit 1
        fi
        
        # Create and push tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
        
        echo "âœ… Tag $TAG created and pushed successfully"

  pre-release-checks:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_CHECKOUT_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy
      env:
        GOPRIVATE: gitlab.com/syntegrity/*
        GONOPROXY: gitlab.com/syntegrity/*
        GONOSUMDB: gitlab.com/syntegrity/*

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0

    - name: Run golangci-lint
      run: |
        golangci-lint run --timeout=5m

    - name: Run tests
      run: |
        go test -v -race ./...

    - name: Build
      run: |
        go build -o syntegrity-dagger .

    - name: Verify binary
      run: |
        ./syntegrity-dagger --help || echo "Binary help command failed, but continuing..."
