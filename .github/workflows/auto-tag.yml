name: Auto Tag

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  GO_VERSION: '1.25.1'

jobs:
  auto-tag:
    name: Auto Tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Calculate next version
      id: next_version
      run: |
        LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        
        # Remove 'v' prefix if present
        VERSION=${LATEST_TAG#v}
        
        # Split version into parts
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Calculate next version based on type
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
        if git rev-parse "$NEXT_VERSION" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Tag $NEXT_VERSION already exists"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "Tag $NEXT_VERSION does not exist"
        fi

    - name: Create and push tag
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
        
        # Create annotated tag
        git tag -a "$NEXT_VERSION" -m "Release $NEXT_VERSION"
        
        # Push tag
        git push origin "$NEXT_VERSION"
        
        echo "‚úÖ Tag $NEXT_VERSION created and pushed successfully"

    - name: Create GitHub Release
      if: steps.check_tag.outputs.tag_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.next_version }}
        release_name: Release ${{ steps.next_version.outputs.next_version }}
        draft: false
        prerelease: false
        body: |
          ## üöÄ Syntegrity Dagger Release ${{ steps.next_version.outputs.next_version }}
          
          ### Changes in this release:
          - Automated release from main branch
          - Built with Go ${{ env.GO_VERSION }}
          
          ### Installation:
          ```bash
          go install gitlab.com/syntegrity/syntegrity-infra@${{ steps.next_version.outputs.next_version }}
          ```
          
          ### Assets:
          Download the appropriate binary for your platform from the assets below.

    - name: Build and upload release assets
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o syntegrity-dagger-linux-amd64 .
        GOOS=darwin GOARCH=amd64 go build -o syntegrity-dagger-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o syntegrity-dagger-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -o syntegrity-dagger-windows-amd64.exe .
        
        # Upload assets to release
        NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
        
        # Get release ID
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$NEXT_VERSION --jq '.id')
        
        # Upload each binary
        gh release upload $NEXT_VERSION syntegrity-dagger-linux-amd64
        gh release upload $NEXT_VERSION syntegrity-dagger-darwin-amd64
        gh release upload $NEXT_VERSION syntegrity-dagger-darwin-arm64
        gh release upload $NEXT_VERSION syntegrity-dagger-windows-amd64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      if: always()
      run: |
        if [ "${{ steps.check_tag.outputs.tag_exists }}" == "false" ]; then
          echo "‚úÖ Successfully created and released ${{ steps.next_version.outputs.next_version }}"
        else
          echo "‚ÑπÔ∏è  Tag ${{ steps.next_version.outputs.next_version }} already exists, skipping release"
        fi
